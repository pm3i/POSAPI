<?php

namespace heyAuto\DemoBundle\Entity;

use Doctrine\ORM\EntityRepository;
use heyAuto\DemoBundle\Entity\PosUsers;
use heyAuto\DemoBundle\Entity\PosGroupMobile;
use heyAuto\DemoBundle\Entity\PosUserGroupMap;
use Symfony\Component\Validator\Constraints\EqualTo;
use Monolog\Logger;



/**
 * PosUserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PosUserRepository extends EntityRepository
{
	public function findUserByName($username)
	{
		return $this->getEntityManager()->getRepository('heyAutoDemoBundle:PosUsers')->findOneBy(array('username' => $username));
	}

	public function findUserByEmail($email)
	{
		return $this->getEntityManager()->getRepository('heyAutoDemoBundle:PosUsers')->findOneBy(array('email' => $email));
	}
	
	public function getUserForIdPassCompanyCode($userName, $password, $companyCode) {
		return $this->getEntityManager()
		->createQuery(
				"SELECT p
					FROM heyAutoDemoBundle:PosUsers p
					WHERE p.username = '".$userName."' AND p.password = '".$password."' AND p.company_code = '".$companyCode."' "
		)->getResult();

		//return $this->getEntityManager()->getRepository('heyAutoDemoBundle:PosUsers')->findOneBy(array('id' => '364'));
	}

	public function getTitleForUser($userID) {
		return $this->getEntityManager()
		->createQuery(
				" SELECT gm
					FROM heyAutoDemoBundle:PosUserGroupMap g
					INNER JOIN heyAutoDemoBundle:PosGroupMobile gm WITH gm.id = g.group_mobile_id
					WHERE g.user_id = '".$userID."' "
		)->getResult();

		//return $this->getEntityManager()->getRepository('heyAutoDemoBundle:PosUsers')->findOneBy(array('id' => '364'));
	}

	public function createNewPosUsers(PosUsers $posUsers) 
	{
		
		if($posUsers == null) {
			return array (
					'mSuccess' => false,
					'mErrorField' => null,
					'mMessage' => "Unknown error" 
			);
			
		} elseif($posUsers->getUsername() == null) {
			
			return array (
					'mSuccess' => false,
					'mErrorField' => "username",
					'mMessage' => "No user name specified"
			);

		} elseif($posUsers->getPassword() == null) {
			return array (
					'mSuccess' => false,
					'mErrorField' => "password",
					'mMessage' => "No password specified"
			);
			
		} elseif($posUsers->getEmail() == null) {
			return array (
					'mSuccess' => false,
					'mErrorField' => "email",
					'mMessage' => "No email specified"
			);

		}else {
		
			if( $posUsers->getUsername() != null && $this->findUserByName($posUsers->getUsername()) != null ) {
				return array (
						'mSuccess' => false,
						'mErrorField' => "name",
						'mMessage' => "User with name [".$posUsers->getUsername()."] already exists in database"
				);

			}	
			
			$manager = $this->getEntityManager();
			$manager->persist($posUsers);
			$manager->flush();
			
			return array (
						'mSuccess' => true,
						'mErrorField' => null,
						'mMessage' => "Registration succeded"
			);
			
		}
	}
	
}
