<?php

namespace heyAuto\DemoBundle\Entity;

use Doctrine\ORM\EntityRepository;
use heyAuto\DemoBundle\Entity\PosItemCostDetail;
use heyAuto\DemoBundle\Entity\PosItems;
use heyAuto\DemoBundle\Entity\PosLanguageItem;
use heyAuto\DemoBundle\Entity\PosInvoiceDetail;
use Symfony\Component\Validator\Constraints\EqualTo;
use Monolog\Logger;



/**
 * PosUserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PosInvoiceDetailRepository extends EntityRepository
{
	public function findInvoiceDetailById($id)
	{
		return $this->getEntityManager()->getRepository('heyAutoDemoBundle:PosInvoiceDetail')->findBy(array('id' => $id));
	}

	public function findInvoiceDetailByInvoieCode($inv_code)
	{
		return $this->getEntityManager()
		->createQuery(
				"SELECT p FROM heyAutoDemoBundle:PosInvoiceDetail p WHERE p.inv_code= '".$inv_code."' "
		)->getResult();
	}

	public function findInvoiceDetailByInvoieCodeAndItemId($inv_code, $itemId)
	{
		return $this->getEntityManager()
		->createQuery(
				"SELECT p FROM heyAutoDemoBundle:PosInvoiceDetail p 
				 WHERE p.inv_code= '".$inv_code."'
				 AND p.item_id= '".$itemId."' 
			    "
		)->getResult();
	}

	public function deleteInvoiceDetailByInvoieCode($inv_code)
	{
		$sql = "DELETE FROM pos_invoice_detail WHERE inv_code = '".$inv_code."' ";
		$stmt = $this->getEntityManager()->getConnection()->prepare($sql);
		return $stmt->execute();
	}

	public function getInvoiceDetail($itemCostId, $company_code)
	{
		return $this->getEntityManager()
		->createQuery(
				" SELECT inv FROM heyAutoDemoBundle:PosInvoiceDetail inv 
				  INNER JOIN heyAutoDemoBundle:PosItemCostDetail it_c_d WITH it_c_d.items_cost_id = '".$itemCostId."'
				  INNER JOIN heyAutoDemoBundle:PosItems it WITH it.item_id = it_c_d.item_id 
				  INNER JOIN heyAutoDemoBundle:PosLanguageItem lng WITH lng.item_id = it.item_id
				  WHERE inv.company_code='".$company_code."'
				  		AND inv.item_id = it.item_id
				"
		)->getResult();
	}

	public function getPriceQuantityInInvoiceDetail($itemId, $company_code, $inv_code, $itemCostId)
	{
		return $this->getEntityManager()
		->createQuery(
				" SELECT inv_d
				  FROM heyAutoDemoBundle:PosInvoiceDetail inv_d 
				  INNER JOIN heyAutoDemoBundle:PosItems it WITH it.item_id = inv_d.item_id
				  INNER JOIN heyAutoDemoBundle:PosItemCostDetail i_c_d WITH i_c_d.items_cost_id = '".$itemCostId."'
				  WHERE inv_d.company_code= '".$company_code."'
				  		AND it.item_id = i_c_d.item_id
				  		AND inv_d.inv_code = '".$inv_code."'
				"
		)->getResult();
	}	

	public function getPriceFromItemId($itemId, $company_code)
	{
		return $this->getEntityManager()
		->createQuery(
				" SELECT i_c_d
				  FROM heyAutoDemoBundle:PosItemCostDetail i_c_d 
				  INNER JOIN heyAutoDemoBundle:PosItems it WITH it.item_id = i_c_d.item_id
				  WHERE i_c_d.item_id = '".$itemId."'
				  AND it.company_code = '".$company_code."'
				"
		)->getResult();
	}
	

	public function createNewPosInvoiceDetail(PosInvoiceDetail $posInvoiceDetail) 
	{
		
		if($posInvoiceDetail == null) {
			return array (
					'mSuccess' => false,
					'mErrorField' => null,
					'mMessage' => "Unknown error" 
			);
			
		} else {
			
			$manager = $this->getEntityManager();
			$manager->persist($posInvoiceDetail);
			$manager->flush();
			
			return array (
						'mSuccess' => true,
						'mErrorField' => null,
						'mMessage' => "Registration succeded"
			);
			
		}
	}

	public function createPosInvoiceDetailReturn01(PosInvoiceDetail $posInvoiceDetail) 
	{
		
		if($posInvoiceDetail == null) {
			return 0;
			
		} else {
			
			$manager = $this->getEntityManager();
			$manager->persist($posInvoiceDetail);
			$manager->flush();
			
			return 1;
			
		}
	}

	public function getPriceInvoiceDetailWithDateNow($inv_code, $companyCode){
		 $sql = "SELECT inv_d.item_id, inv_d.quantity, i_c_d.price
				FROM pos_invoice_detail inv_d
				INNER JOIN pos_items_cost_detail i_c_d ON i_c_d.item_id = inv_d.item_id
				INNER JOIN pos_item_cost i_c ON i_c.id = i_c_d.items_cost_id
				WHERE inv_d.company_code = '".$companyCode."' AND
				inv_d.inv_code ='".$inv_code."' AND 
				i_c.start_date < GETDATE()
				AND GETDATE() < i_c.end_date
				";
		$stmt = $this->getEntityManager()->getConnection()->prepare($sql);
		$stmt->execute();
		return $stmt->fetchAll();
	}


	public function getAllInvoiceDetail($itemCostId, $companyCode){
		 $sql = "SELECT 
				CAST(inv_code AS TEXT) AS inv_code, lng.lng_value,
				CAST(descriptiON AS TEXT) AS descriptiON, inv.id, inv.invd_createtime,inv.invd_updatetime, inv.checked, inv.quantity,
				it_c_d.price, inv.comment, inv.item_id
				FROM pos_invoice_detail  inv   
				INNER JOIN pos_items_cost_detail it_c_d ON it_c_d.items_cost_id = '".$itemCostId."'
				INNER JOIN pos_items it ON it.item_id = it_c_d.item_id  
				
				INNER JOIN pos_language_item lng ON lng.item_id = it.item_id      
						
				where inv.company_code='".$companyCode."'
				AND inv.item_id = it.item_id
				";
		$stmt = $this->getEntityManager()->getConnection()->prepare($sql);
		$stmt->execute();
		return $stmt->fetchAll();
	}

	public function getSumQuantityInvoiceDetail($companyCode, $item_id){
		 $sql = "SELECT sum(quantity) AS quantity from pos_invoice_detail 
				where convert(date,invd_createtime)= convert(date,getdate()) 
				and item_id='".$item_id."'  and checked=1 and company_code='".$companyCode."'
				";
		$stmt = $this->getEntityManager()->getConnection()->prepare($sql);
		$stmt->execute();
		return $stmt->fetchAll();
	}

	public function updateInvoiceDetail(PosInvoiceDetail $posInvoiceDetail) {
		if($posInvoiceDetail == null){
			return 0;
		}

		$manager = $this->getEntityManager();
		$manager->merge($posInvoiceDetail);
		$manager->flush();

		return 1;
	}

	public function deleteInvoiceDetailById($id){
		 $sql = "DELETE FROM pos_invoice_detail where id ='".$id."'
				";
		$stmt = $this->getEntityManager()->getConnection()->prepare($sql);
		return $stmt->execute();
	}

	public function getInvoiceCookDetail($companyCode){
		 $sql = "SELECT inv_d.item_id,  sum(inv_d.quantity) as total , l_i.lng_value
				FROM pos_invoice_detail AS inv_d	
				INNER JOIN pos_invoice iv ON iv.inv_code = inv_d.inv_code
				INNER JOIN pos_items it ON it.item_id = inv_d.item_id	
				INNER JOIN pos_language_item l_i ON l_i.item_id = it.item_id
				WHERE  CONVERT(VARCHAR(20),inv_d.invd_createtime, 112) >= CONVERT(VARCHAR(20),GETDATE(), 112)
				       AND inv_d.company_code = '".$companyCode."'
					   AND l_i.lng_code ='1'
					   AND iv.status !='2'
				GROUP BY inv_d.item_id,  l_i.lng_value
				";
		$stmt = $this->getEntityManager()->getConnection()->prepare($sql);
		$stmt->execute();
		return $stmt->fetchAll();
	}

	public function checkComment($item_id, $companyCode){
		 $sql = "SELECT  comment,checked from pos_invoice_detail 
					where item_id='".$item_id."' 
					and company_code='".$companyCode."' 
					and convert(date,invd_createtime)=convert(date,getdate())
				";
		$stmt = $this->getEntityManager()->getConnection()->prepare($sql);
		$stmt->execute();
		return $stmt->fetchAll();
	}


}
