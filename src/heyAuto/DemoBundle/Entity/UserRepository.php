<?php

namespace heyAuto\DemoBundle\Entity;

use Doctrine\ORM\EntityRepository;
use heyAuto\DemoBundle\Entity\User;
use Symfony\Component\Validator\Constraints\EqualTo;
use Monolog\Logger;



/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
	
	public function findAllOrderedByName()
	{
		return $this->getEntityManager()
		->createQuery(
				'SELECT p FROM heyAutoDemoBundle:User p ORDER BY p.username DESC'
		)->getResult();
	}
	
	public function findAllOnline()
	{
		return $this->getEntityManager()
		->createQuery(
				'SELECT p FROM heyAutoDemoBundle:User p WHERE p.online=1 ORDER BY p.username DESC'
		)->getResult();
	}
	
	public function findOnlineUsersWithRole($role)
	{
		if( empty($role) || $role==User::$HEYAUTO_ROLE_ANY ) {
			return $this->findAllOnline();
		}
		return $this->getEntityManager()
		->createQuery(
				'SELECT p FROM heyAutoDemoBundle:User p WHERE p.online=1 AND p.role='.$role.' ORDER BY p.username DESC'
		)->getResult();
	}
	
	public function findUsersWithRole($role)
	{
		if( empty($role)  || $role==User::$HEYAUTO_ROLE_ANY ) {
			return $this->findAll();
		}
		return $this->getEntityManager()
		->createQuery(
				'SELECT p FROM heyAutoDemoBundle:User p WHERE p.role='.$role.' ORDER BY p.username DESC'
		)->getResult();
	}
	
	public function getDriverParamsForUserId($userId) {
		return $this->getEntityManager()
		->createQuery(
			'SELECT p FROM heyAutoDemoBundle:DriverParams p WHERE p.user='.$userId
		)->getResult();
	}
	
	public function getPassengerParamsForUserId($userId) {
		return $this->getEntityManager()
		->createQuery(
				'SELECT p FROM heyAutoDemoBundle:PassengerParams p WHERE p.user='.$userId
		)->getResult();
	}
	
	
	public function findUserById($id)
	{
		return $this->getEntityManager()->getRepository('heyAutoDemoBundle:User')->findOneBy(array('id' => $id));
	}

	public function findUserByFacebookId($id)
	{
		return $this->getEntityManager()->getRepository('heyAutoDemoBundle:User')->findOneBy(array('facebookId' => $id));
	}

	public function findUserByGoogleId($id)
	{
		return $this->getEntityManager()->getRepository('heyAutoDemoBundle:User')->findOneBy(array('googleId' => $id));
	}
	
	public function findUserByName($username)
	{
		return $this->getEntityManager()->getRepository('heyAutoDemoBundle:User')->findOneBy(array('username' => $username));
	}

	public function findUserByFullName($fullname)
	{
		return $this->getEntityManager()->getRepository('heyAutoDemoBundle:User')->findOneBy(array('fullName' => $fullname));
	}
	
	public function findUserByEmail($email)
	{
		return $this->getEntityManager()->getRepository('heyAutoDemoBundle:User')->findOneBy(array('email' => $email));
	}

	public function findUserByPhoneNo($phoneNo)
	{
		return $this->getEntityManager()->getRepository('heyAutoDemoBundle:User')->findOneBy(array('phoneNo' => $phoneNo));
	}
	
	public function findUserByToken($token)
	{
		return $this->getEntityManager()->getRepository('heyAutoDemoBundle:User')->findOneBy(array('token' => $token));
	}
	
	public function findUserByConfirmationToken($token)
	{
		return $this->getEntityManager()->getRepository('heyAutoDemoBundle:User')->findOneBy(array('confirmationToken' => $token));
	}
	
	public function createNewUser(User $user) 
	{
		
		if($user == null) {
			return array (
					'mSuccess' => false,
					'mErrorField' => null,
					'mMessage' => "Unknown error" 
			);
			
		} elseif($user->getUsername() == null) {
			
			return array (
					'mSuccess' => false,
					'mErrorField' => "name",
					'mMessage' => "No name specified"
			);

		} elseif($user->getPassword() == null) {
			return array (
					'mSuccess' => false,
					'mErrorField' => "password",
					'mMessage' => "No password specified"
			);
			
		} elseif($user->getEmail() == null) {
			return array (
					'mSuccess' => false,
					'mErrorField' => "email",
					'mMessage' => "No email specified"
			);

		}else {
		
			if( $user->getUsername() != null && $this->findUserByName($user->getUsername()) != null ) {
				return array (
						'mSuccess' => false,
						'mErrorField' => "name",
						'mMessage' => "User with name [".$user->getUsername()."] already exists in database"
				);

			}
			if( $user->getEmail() != null && $this->findUserByEmail($user->getEmail()) != null ) {
				return array (
						'mSuccess' => false,
						'mErrorField' => "email",
						'mMessage' => "User with email [".$user->getEmail()."] already exists in database"
				);

			}
			if( $user->getPhoneNo() != null && $this->findUserByPhoneNo($user->getPhoneNo()) != null ) {
				return array (
						'mSuccess' => false,
						'mErrorField' => "phoneNo",
						'mMessage' => "User with phoneNo [".$user->getPhoneNo()."] already exists in database"
				);

			}	
			
			$user->setOnline(false);
			$user->setActive(false);
			$user->setEnabled(true);
			$user->setLocked(false);
			$user->setExpired(false);
			$user->setCredentialsExpired(false);
			
			$manager = $this->getEntityManager();
			$manager->persist($user);
			$manager->flush();
			
			return array (
						'mSuccess' => true,
						'mErrorField' => null,
						'mMessage' => "Registration succeded"
				);
			
		}
	}
	
// 	public function crateOffer(Offer $offer) {
// 		$manager = $this->getEntityManager();
// 		$manager->persist($user);
		
// 	}

	
	
	public function updateUser(User $user) {

		$manager = $this->getEntityManager();
		$manager->merge($user);
		$manager->flush();

		return array (
						'mSuccess' => true,
						'mErrorField' => null,
						'mMessage' => "User updated successfully"
				);
		
	}
	
	
	public function isUserValid($name, $password){

		$user = $this->findUserByName($name);
		
		if($user != null && $user->getPassword() == $password) {
			return true;
		} else {
			return false;
		}
				
	}
	

	public function loginUser($name, $password){
	
		$user = $this->findUserByName($name);
		if($user != null && $user->getPassword() == $password) {

// 			$tokenGenerator = $this->container->get('fos_user.util.token_generator');
// 			$user->setConfirmationToken($tokenGenerator->generateToken());
			
// 			$time = time();
			$user->setConfirmationToken( base_convert(sha1(uniqid(mt_rand(), true)), 16, 36) );
			
			//date('Y-m-d h:i:s')
			$user->setLastLogin( new \DateTime('NOW'));
			
			$this->updateUser($user);

			return array (
					'mSuccess' => true,
					'mToken' => $user->getConfirmationToken(),
					'mId' => $user->getId(),
					'mUsername' => $user->getUsername(),
					'mMessage' => "User authenticated successfully",
			);
		} else {
			return array (
					'mSuccess' => false,
// 					'mToken' => null,
					'mMessage' => "Wrong credentials",
			);
		}
	
	}
	
	public function logoutUser($name){
	
		$user = $this->findUserByName($name);
	
		if($user != null) {
				
			$user->setConfirmationToken( null );
			$this->updateUser($user);
				
			return array (
					'mSuccess' => true,
					'mToken' => null,
					'mMessage' => "User logged out successfully"
			);
		} else {
			return array (
					'mSuccess' => false,
					'mToken' => null,
					'mMessage' => "User logout failed"
			);
		}
	
	}
	
	
	public function findAllVehicles()
	{
		return $this->getEntityManager()
		->createQuery(
				'SELECT p FROM heyAutoDemoBundle:Vehicle p'
		)->getResult();
	}
	
	//TODO switch in this and other methods using token for security purposes, from confirmationToken to token
	// use token from heyAuto\DemoBundle\Entity\User instead of FOS\UserBundle\Model\User as BaseUser
	
	public function verifyIfTokenBelongsToOffererOrOfferee($offer, $token) {
		$tokenOwner = $this->findUserByConfirmationToken( $token );
	
		$isOffererTokenOwner = false;
		$isOffereeTokenOwner = false;
		if ($tokenOwner != null) {
			if ($offer->getOfferer() && ($tokenOwner->getId() == $offer->getOfferer()->getId())) {
				$isOffererTokenOwner = true;
				return true;
			}
	
			if ($offer->getOfferee() && ($tokenOwner->getId() == $offer->getOfferee()->getId())) {
				$isOffereeTokenOwner = true;
				return true;
			}
		}
		 
		if( !$tokenOwner || ( !$isOffererTokenOwner && !$isOffereeTokenOwner )
		) {
			return false;
		}
	}
	
	public function updateUsersRatingsFromOffer( Offer $offer ){
		
		$manager = $this->getEntityManager();
		
		//--- update driver's rating
		/* @var $driver User */
		$driver = $this->findUserById($offer->getOfferee());
		
		$ratingsAvg = $driver->getUserRatingsAvg();
		$ratingsCount = $driver->getUserRatingsCount();
		
		$driver->setUserRatingsAvg( ($ratingsAvg * $ratingsCount + $offer->getDriverRating())
								/($ratingsCount + 1) );
		$driver->setUserRatingsCount( $ratingsCount + 1 );
		
		$manager->persist($driver);
		$manager->flush();
		
		//--- update passenger's rating
		/* @var $passenger User */
		$passenger = $this->findUserById($offer->getOfferer());
		
		$ratingsAvg = $passenger->getUserRatingsAvg();
		$ratingsCount = $passenger->getUserRatingsCount();
		
		$passenger->setUserRatingsAvg( ($ratingsAvg * $ratingsCount + $offer->getPassengerRating())
				/($ratingsCount + 1) );
		$passenger->setUserRatingsCount( $ratingsCount + 1 );
		
		$manager->persist($passenger);
		$manager->flush();
		
	}
	
}
